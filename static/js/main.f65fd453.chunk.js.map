{"version":3,"sources":["images/tr.svg","images/en.svg","components/Header.tsx","utils/api.ts","services/apiService.ts","components/Countries.tsx","store/actions/countryAction.ts","store/actions/covidStateAction.ts","components/TotalInfo.tsx","components/WorldMap.jsx","components/LastDaysStatistics.tsx","App.tsx","reportWebVitals.ts","i18n/config.js","store/reducers/countryReducer.ts","store/reducers/covidStateReducer.ts","store/index.ts","index.tsx"],"names":["Header","i18n","useTranslation","handleChangeLanguage","lang","changeLanguage","className","src","flagTr","alt","onClick","flagEn","axios","create","baseURL","headers","ApiService","console","log","activeState","a","api","get","data","sort","c1","c2","iso","Countries","useSelector","state","covidState","worldwide","country","dispatch","useDispatch","t","useState","countries","setCountries","handleOnClick","Object","keys","length","countryInfo","iso2","type","payload","changeActiveCountry","handleCovidStateClick","selectActiveCovidState","useEffect","apiService","getAllCountries","then","value","catch","err","getWorldwideInfo","worldWide","setWorldWideInfo","Row","Col","Card","Body","style","height","ListGroup","Item","variant","cursor","cases","thousandSeparator","displayType","map","index","active","deaths","flag","marginLeft","TotalInfo","selectedCountry","setWorldwide","setData","getWorldwideData","param","chartData","buildChartData","push","name","recovered","RADIAN","Math","PI","formatCash","n","toFixed","COLORS","PieChart","width","Pie","dataKey","isAnimationActive","outerRadius","fill","labelLine","label","cx","cy","midAngle","innerRadius","percent","radius","x","cos","y","sin","textAnchor","dominantBaseline","entry","Cell","Tooltip","WorldMap","activeCountry","position","setPosition","zoom","setZoom","setMap","getCountries","lat","long","flyTo","MapContainer","whenCreated","center","scrollWheelZoom","TileLayer","attribution","url","percentage","Circle","color","weight","fillColor","Popup","backgroundImage","LastDaysStatistics","setChartData","timeline","setTimeline","getHistoricalData","getHistoricalCountryData","casesDailyInfo","deathsDailyInfo","yesterdayIndex","date","Number","toString","death","CustomTooltip","ResponsiveContainer","LineChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","YAxis","content","Legend","verticalAlign","formatter","Line","stroke","activeDot","r","App","Container","fluid","sm","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","use","initReactI18next","init","fallbackLng","lng","resources","tr","translations","require","en","ns","defaultNS","languages","defaultState","countryReducer","action","covidStateReducer","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f65fd453.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/tr.2880fc8e.svg\";","export default __webpack_public_path__ + \"static/media/en.a3e6d90f.svg\";","import React from 'react';\r\nimport {useTranslation} from \"react-i18next\";\r\nimport flagTr from '../images/tr.svg';\r\nimport flagEn from '../images/en.svg';\r\n\r\nfunction Header() {\r\n    const { i18n } = useTranslation();\r\n    const handleChangeLanguage = (lang:string) => () => {\r\n        return i18n.changeLanguage(lang);\r\n    };\r\n    return (\r\n        <div className=\"app-title\">\r\n            <img src={flagTr} className=\"translation-flag\" alt=\"logo\" onClick={handleChangeLanguage('tr')} />\r\n            <img src={flagEn} className=\"translation-flag en\" alt=\"logo\" onClick={handleChangeLanguage('en')} />\r\n        </div>\r\n    );\r\n}\r\nexport default Header;","import axios from \"axios\";\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default () => {\r\n    return axios.create({\r\n        baseURL: \"https://disease.sh/v3/covid-19/\",\r\n        headers: {\r\n            \"Content-type\": \"application/json\"\r\n        }\r\n    })\r\n}\r\n\r\n","import {Country} from \"../types/country\";\r\nimport {AxiosResponse} from \"axios\";\r\nimport api from \"../utils/api\";\r\nimport {Worldwide} from \"../types/worldwide\";\r\nimport {Historical, Timeline} from \"../types/historical\";\r\n\r\nexport default class ApiService {\r\n\r\n    constructor() {\r\n        console.log(\"API service called.\");\r\n    }\r\n\r\n    async getAllCountries(activeState: string): Promise<Country[]> {\r\n        const {data} : AxiosResponse<Country[]> = await api().get<Country[]>(\"countries\");\r\n        data.sort(function (c1, c2) {return (c2 as any)[activeState] as number - (c1 as any)[activeState] as number});\r\n        return data;\r\n    }\r\n\r\n    async getWorldwideInfo() : Promise<Worldwide> {\r\n        const {data}: AxiosResponse<Worldwide> =  await api().get<Worldwide>(\"all\");\r\n        return data;\r\n    }\r\n\r\n    async getHistoricalData() : Promise<Timeline> {\r\n\r\n        try {\r\n            const {data} : AxiosResponse<Timeline> = await api().get<Timeline>(\"historical/all?lastdays=30\");\r\n            return data;\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n        return {} as Timeline;\r\n    }\r\n\r\n    async getHistoricalCountryData(iso: string) : Promise<Historical> {\r\n\r\n        try {\r\n\r\n            const {data} : AxiosResponse<Historical> = await api().get<Historical>(\"historical/\"+ iso +\"?lastdays=30\");\r\n            return data;\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n        return {} as Historical;\r\n    }\r\n\r\n}","import React, {useEffect, useState} from 'react';\r\nimport {Card, Col, ListGroup, Row} from \"react-bootstrap\";\r\nimport {useTranslation} from \"react-i18next\";\r\nimport {Country} from \"../types/country\";\r\nimport NumberFormat from 'react-number-format';\r\nimport {changeActiveCountry, selectCountry, setWorldWideInfo} from \"../store/actions/countryAction\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppState} from \"../store\";\r\nimport {selectActiveCovidState} from \"../store/actions/covidStateAction\";\r\nimport ApiService from \"../services/apiService\";\r\n\r\nfunction Countries() {\r\n\r\n    const {activeState} = useSelector((state:AppState) => state.covidState);\r\n    const {worldwide} = useSelector((state:AppState) => state.country);\r\n    // const {data: countries}  = useSelector((state:AppState) => state.country);\r\n    const dispatch = useDispatch();\r\n    const { t } = useTranslation();\r\n    const [countries, setCountries] = useState<Country[]>([]);\r\n\r\n    useEffect(() => {\r\n\r\n        let apiService = new ApiService();\r\n        apiService.getAllCountries(activeState).then(value => {\r\n             setCountries(value);\r\n         }).catch(err => console.log(err));\r\n\r\n        apiService.getWorldwideInfo().then(worldWide => {\r\n\r\n            dispatch(setWorldWideInfo(worldWide))\r\n        });\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [activeState]);\r\n\r\n    function handleOnClick(country:Country) {\r\n        dispatch(selectCountry(Object.keys(country).length !== 0 && country ? country.countryInfo.iso2 : \"all\"));\r\n        dispatch(changeActiveCountry(country));\r\n    }\r\n\r\n    function handleCovidStateClick(state: string) {\r\n        dispatch(selectActiveCovidState(state));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Row className=\"mb-2\">\r\n\r\n                <Col onClick={ () => handleCovidStateClick(\"cases\")} className=\"d-flex align-items-stretch covid-state\">\r\n                    <Card className={activeState === \"cases\" ? \"active-state w-100\" : \"w-100\"}>\r\n                        <Card.Body>{t('total')}</Card.Body>\r\n                    </Card>\r\n                </Col>\r\n                <Col onClick={ () => handleCovidStateClick(\"active\")} className=\"d-flex align-items-stretch covid-state\">\r\n                    <Card className={activeState === \"active\" ? \"active-state w-100\" : \"w-100\"}>\r\n                        <Card.Body>{t('active')}</Card.Body>\r\n                    </Card>\r\n                </Col>\r\n                <Col onClick={ () => handleCovidStateClick(\"deaths\")} className=\"d-flex align-items-stretch covid-state\">\r\n                    <Card className={activeState === \"deaths\" ? \"active-state w-100\" : \"w-100\"}>\r\n                        <Card.Body>{t('death')}</Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n\r\n            <Card style={{height: \"530px\"}}>\r\n                {/*<Card.Header className=\"bg-white p-3\"><h3> {t('countries')} </h3> </Card.Header>*/}\r\n                <ListGroup.Item variant=\"primary\" style={{cursor: \"pointer\"}}  onClick={() => handleOnClick({} as Country)} className=\"border-0 fw-bold d-flex justify-content-between align-items-start \">\r\n                    <div>{t('worldwide')}</div>\r\n                    <span ><NumberFormat value={worldwide?.cases} thousandSeparator={true} displayType={'text'}  /></span>\r\n                </ListGroup.Item>\r\n                <ListGroup style={{cursor: \"pointer\"}} variant=\"flush\" className=\"country-list\">\r\n\r\n                    {countries.map((country, index) => {\r\n\r\n                        let className = \"d-flex justify-content-between align-items-start \";\r\n                        if(index %2 === 0) {\r\n                            className += \"list-group-item-secondary\";\r\n                        }\r\n\r\n                        let data= country.cases;\r\n                        if(activeState === \"active\") {\r\n\r\n                            data = country.active;\r\n                        } else if (activeState === \"deaths\") {\r\n\r\n                            data = country.deaths;\r\n                        }\r\n\r\n                        return <ListGroup.Item key={country.country} onClick={() => handleOnClick(country)} className={className}>\r\n\r\n                            <div >\r\n                                <img src={country.countryInfo.flag} height={15} alt={country.countryInfo.iso2} />\r\n                                <span style={{marginLeft: \"5px\"}}>{country.country}</span>\r\n                            </div>\r\n                           <span className=\"fw-bold\"> <NumberFormat value={data} thousandSeparator={true} displayType={'text'}  /></span>\r\n                        </ListGroup.Item>;\r\n                    })}\r\n                </ListGroup>\r\n            </Card>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Countries;","import {Country, CountryDispatch} from \"../../types/country\";\r\nimport {Worldwide} from \"../../types/worldwide\";\r\n\r\n\r\nexport const selectCountry = (iso: string) => async (dispatch: CountryDispatch) => {\r\n\r\n    dispatch({type: \"SELECT_COUNTRY\", payload: iso});\r\n};\r\n\r\nexport const changeActiveCountry = (country: Country) => async (dispatch: CountryDispatch) => {\r\n\r\n    dispatch({type: \"CHANGE_ACTIVE_COUNTRY\", payload: country});\r\n};\r\n\r\nexport const setWorldWideInfo = (worldwide: Worldwide) => async (dispatch: CountryDispatch) => {\r\n\r\n    dispatch({type: \"SET_WORLDWIDE_INFO\", payload: worldwide});\r\n};","import {CovidStateDispatch} from \"../../types/covidState\";\r\n\r\nexport const selectActiveCovidState = (state: string) => async (dispatch: CovidStateDispatch) => {\r\n\r\n    dispatch({type: \"SELECT_STATE\", payload: state});\r\n};\r\n","import React, {useEffect, useState} from 'react';\r\nimport {Card, Col, Row} from \"react-bootstrap\";\r\nimport {Cell, Pie, PieChart, Tooltip} from 'recharts';\r\nimport {Worldwide} from \"../types/worldwide\";\r\nimport axios, {AxiosResponse} from \"axios\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppState} from \"../store\";\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\ninterface ChartData {\r\n    name:string,\r\n    value: number\r\n}\r\n\r\nfunction TotalInfo() {\r\n\r\n    const { t } = useTranslation();\r\n    const {selectedCountry} = useSelector((state:AppState) => state.country);\r\n    const [worldwide, setWorldwide] = useState<Worldwide>();\r\n    const [data, setData] = useState<ChartData[]>([]);\r\n    const getWorldwideData = async () => {\r\n\r\n        let param = \"\";\r\n        if(selectedCountry !== \"all\") {\r\n\r\n            param = \"countries/\"\r\n        }\r\n        const {data}: AxiosResponse<Worldwide> = await axios.get<Worldwide>(\"https://disease.sh/v3/covid-19/\" + param + selectedCountry);\r\n        setWorldwide(data);\r\n        let chartData = buildChartData(data);\r\n        setData(chartData);\r\n    };\r\n\r\n    const buildChartData = (data: Worldwide) => {\r\n\r\n      let chartData = [];\r\n      chartData.push({name : \"Aktif\", value: data.active});\r\n      chartData.push({name : \"Ölüm\", value: data.deaths});\r\n      chartData.push({name : \"İyileşen\", value: data.recovered});\r\n\r\n      return chartData;\r\n    };\r\n\r\n    useEffect(() => {\r\n\r\n        getWorldwideData();\r\n    }, [selectedCountry]);\r\n\r\n\r\n    const RADIAN = Math.PI / 180;\r\n    const renderCustomizedLabel = ({ cx, cy, midAngle, innerRadius, outerRadius, percent }: any) => {\r\n        const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\r\n        const x = cx + radius * Math.cos(-midAngle * RADIAN);\r\n        const y = cy + radius * Math.sin(-midAngle * RADIAN);\r\n        return (\r\n            <text x={x} y={y} fill=\"white\" textAnchor={x > cx ? 'start' : 'end'} dominantBaseline=\"central\">\r\n                {`${(percent * 100).toFixed(0)}%`}\r\n            </text>\r\n        );\r\n    };\r\n\r\n    const formatCash = (n: number) => {\r\n        if (n < 1e3) return n;\r\n        if (n >= 1e3 && n < 1e6) return +(n / 1e3).toFixed(1) + \"K\";\r\n        if (n >= 1e6 && n < 1e9) return +(n / 1e6).toFixed(1) + \"M\";\r\n        if (n >= 1e9 && n < 1e12) return +(n / 1e9).toFixed(1) + \"B\";\r\n        if (n >= 1e12) return +(n / 1e12).toFixed(1) + \"T\";\r\n    };\r\n\r\n    const COLORS = ['#0d6efd', '#d8343f', '#ffc62a'];\r\n    return (\r\n        <div >\r\n            <Card className=\"mt-4\">\r\n                <Card.Body>\r\n                    <Row>\r\n                        <Col>\r\n                            <div  >\r\n                                <div>\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <label>\r\n                                                <i className=\"fa fa-circle text-warning\" /> <span>{t('recovered')} : </span>\r\n                                                {/*<NumberFormat value={worldwide?.recovered} thousandSeparator={true} displayType={'text'}  />*/}\r\n                                                {worldwide && formatCash(worldwide.recovered)}\r\n                                            </label>\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <label>\r\n                                                <i className=\"fa fa-circle text-primary\" /> <span>{t('active')} : </span>\r\n                                                {/*<NumberFormat value={worldwide?.active} thousandSeparator={true} displayType={'text'}  />*/}\r\n                                                {worldwide && formatCash(worldwide.active)}\r\n                                            </label>\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <label> <i className=\"fa fa-circle text-danger\" /> <span>{t('death')} : </span>\r\n                                                {/*<NumberFormat value={worldwide?.deaths} thousandSeparator={true} displayType={'text'}  />*/}\r\n                                                {worldwide && formatCash(worldwide.deaths)}\r\n                                            </label>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </div>\r\n                                <PieChart width={400} height={310}>\r\n                                    <Pie\r\n                                        dataKey=\"value\"\r\n                                        isAnimationActive={true}\r\n                                        data={data}\r\n                                        outerRadius={150}\r\n                                        fill=\"#8884d8\"\r\n                                        labelLine={false}\r\n                                        label={renderCustomizedLabel}\r\n                                        // label\r\n                                    >\r\n                                        {data.map((entry, index) => (\r\n                                            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n                                        ))}\r\n                                    </Pie>\r\n                                    <Tooltip />\r\n                                </PieChart>\r\n                            </div>\r\n                        </Col>\r\n\r\n                    </Row>\r\n\r\n\r\n                </Card.Body>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TotalInfo;","import React, {useEffect, useState} from 'react';\r\nimport {Circle, MapContainer, Popup, TileLayer} from \"react-leaflet\";\r\nimport \"../Map.css\";\r\nimport axios from \"axios\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport {useSelector} from \"react-redux\";\r\n\r\n\r\nfunction WorldMap() {\r\n\r\n    const {selectedCountry} = useSelector(state => state.country);\r\n    const {activeCountry} = useSelector(state => state.country);\r\n    const [countries, setCountries] = useState([]);\r\n    const [position, setPosition] = useState([39.925533, 32.866287]); // Ankara\r\n    const [zoom, setZoom] = useState(2);\r\n    const [map, setMap] = useState(null);\r\n\r\n    const getCountries = async () => {\r\n\r\n        const {data} = await axios.get(\"https://disease.sh/v3/covid-19/countries\");\r\n        data.sort(function (c1, c2) {return c2.cases - c1.cases});\r\n        setCountries(data);\r\n    };\r\n\r\n    useEffect(() => {\r\n\r\n        getCountries();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n\r\n        setPosition(selectedCountry !== \"all\" ? [activeCountry.countryInfo.lat, activeCountry.countryInfo.long] : [39.925533, 32.866287]);\r\n        setZoom(selectedCountry !== \"all\" ? 5 : 2);\r\n    }, [activeCountry]);\r\n\r\n    if (map) {\r\n        map.setZoom(zoom);\r\n        map.flyTo(position);\r\n    }\r\n\r\n    return (\r\n            <MapContainer  whenCreated={setMap} center={position} zoom={zoom} scrollWheelZoom={true}>\r\n                <TileLayer\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                />\r\n\r\n                {countries.map((country, index) => {\r\n\r\n                    let percentage = (country.active / 18010074) * 5000000;\r\n                    let color = \"red\";\r\n                    return <Circle key={country.country} center={[country.countryInfo.lat, country.countryInfo.long]}\r\n                                   color={color} weight={2} fillColor={color} radius={ percentage} >\r\n                        <Popup>\r\n                            <div className=\"info-container\">\r\n                                <div\r\n                                    className=\"info-flag\"\r\n                                    style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n                                />\r\n                                <div className=\"info-name\">{country.country}</div>\r\n                                <div className=\"info-confirmed\">\r\n                                    Cases:  <NumberFormat value={country.cases} thousandSeparator={true} displayType={'text'}  />\r\n                                </div>\r\n                                <div className=\"info-recovered\">\r\n                                    Recovered: <NumberFormat value={country.recovered} thousandSeparator={true} displayType={'text'}  />\r\n                                </div>\r\n                                <div className=\"info-deaths\">\r\n                                    Deaths: <NumberFormat value={country.deaths} thousandSeparator={true} displayType={'text'}  />\r\n                                </div>\r\n                            </div>\r\n                        </Popup>\r\n\r\n                    </Circle>\r\n\r\n                })}\r\n\r\n            </MapContainer>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default WorldMap;\r\n","import React, {useEffect, useState} from 'react';\r\nimport {useTranslation} from \"react-i18next\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppState} from \"../store\";\r\nimport ApiService from \"../services/apiService\";\r\nimport {Timeline} from \"../types/historical\";\r\nimport {Card} from \"react-bootstrap\";\r\nimport {CartesianGrid, Legend, Line, LineChart, ResponsiveContainer, Tooltip, XAxis, YAxis} from \"recharts\";\r\nimport NumberFormat from \"react-number-format\";\r\n\r\ninterface LineChartData {\r\n    date: string,\r\n    cases: number,\r\n    death: number\r\n}\r\n\r\nfunction LastDaysStatistics() {\r\n\r\n    const {selectedCountry} = useSelector((state:AppState) => state.country);\r\n    const [chartData, setChartData] = useState<LineChartData[]>([]);\r\n    const [timeline, setTimeline] = useState<Timeline>({} as Timeline);\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n\r\n       let apiService = new ApiService();\r\n       if(selectedCountry === \"all\") {\r\n\r\n           apiService.getHistoricalData().then(value => {\r\n               setTimeline(value);\r\n           });\r\n       } else {\r\n\r\n           apiService.getHistoricalCountryData(\"TR\").then(value => {\r\n               setTimeline(value.timeline);\r\n           });\r\n       }\r\n    }, [selectedCountry]);\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if(Object.keys(timeline).length !== 0) {\r\n\r\n            let data: LineChartData[] = [];\r\n            let casesDailyInfo = timeline.cases;\r\n            let deathsDailyInfo = timeline.deaths;\r\n            let yesterdayIndex = \"\";\r\n            for(let date in casesDailyInfo) {\r\n\r\n                if(yesterdayIndex === \"\") {\r\n\r\n                    yesterdayIndex = date;\r\n                }\r\n\r\n                let cases = Number(casesDailyInfo[date]) - Number(casesDailyInfo[yesterdayIndex]);\r\n                let deaths = Number(deathsDailyInfo[date]) - Number(deathsDailyInfo[yesterdayIndex]);\r\n                data.push({date: date.toString(), cases: cases , death: deaths});\r\n                yesterdayIndex = date;\r\n            }\r\n            setChartData(data);\r\n        }\r\n    }, [timeline]);\r\n\r\n    const renderColorfulLegendText = (value: string, entry: any) => {\r\n        const { color } = entry;\r\n        return <span style={{ color }}>{t( value)}</span>;\r\n    };\r\n\r\n    const CustomTooltip = ({ active, payload, label } : any) => {\r\n        console.log(active, payload, label)\r\n        if (active && payload && payload.length) {\r\n            return (\r\n                <div className=\"custom-tooltip\">\r\n                    <p>{label}</p>\r\n                    <p className=\"label\" style={{color: `${payload[0].color}`}}> { t(payload[0].name)} :  <NumberFormat value={`${payload[0].payload[payload[0].name]}`} thousandSeparator={true} displayType={'text'}  /> </p>\r\n                    <p className=\"label\" style={{color: `${payload[1].color}`}}> { t(payload[1].name)} :  <NumberFormat value={`${payload[1].payload[payload[1].name]}`} thousandSeparator={true} displayType={'text'}  /> </p>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    };\r\n\r\n    return (\r\n        <div className=\"mt-4\">\r\n            <Card >\r\n                <Card.Body>\r\n                    <h4 className=\"mb-4\">{selectedCountry === \"all\" ? t('worldwide') : selectedCountry} -  {t('last30Days')}</h4>\r\n                    <div style={{height: \"280px\"}}>\r\n                        <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                            <LineChart\r\n                                width={500}\r\n                                height={300}\r\n                                data={chartData}\r\n                                margin={{\r\n                                    top: 5,\r\n                                    right: 30,\r\n                                    left: 20,\r\n                                    bottom: 5,\r\n                                }}\r\n                            >\r\n                                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                                <XAxis dataKey=\"date\" />\r\n                                <YAxis />\r\n                                <Tooltip content={<CustomTooltip />}/>\r\n                                <Legend verticalAlign=\"top\" formatter={renderColorfulLegendText} height={36}/>\r\n                                <Line type=\"monotone\" dataKey=\"cases\" stroke=\"#19871c\" activeDot={{ r: 8 }} />\r\n                                <Line type=\"monotone\" dataKey=\"death\" stroke=\"#d8343f\" />\r\n                            </LineChart>\r\n                        </ResponsiveContainer>\r\n                    </div>\r\n\r\n                </Card.Body>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LastDaysStatistics;","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Header from \"./components/Header\";\nimport {Col, Container, Row} from \"react-bootstrap\";\nimport Countries from \"./components/Countries\";\nimport TotalInfo from \"./components/TotalInfo\";\nimport \"leaflet/dist/leaflet.css\";\nimport WorldMap from \"./components/WorldMap\";\nimport LastDaysStatistics from \"./components/LastDaysStatistics\";\n\n\nfunction App() {\n  return (\n\n      <Container fluid className=\"px-container\">\n        <Header/>\n        <Row className=\"content\">\n          <Col sm={4}>\n              <Countries/>\n              <TotalInfo/>\n          </Col>\n          <Col sm={8}>\n              <WorldMap/>\n              <LastDaysStatistics/>\n          </Col>\n        </Row>\n      </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import i18n from 'i18next';\r\nimport { initReactI18next } from 'react-i18next';\r\n\r\ni18n.use(initReactI18next).init({\r\n    fallbackLng: 'tr',\r\n    lng: 'tr',\r\n    resources: {\r\n        tr: {\r\n            translations: require('./locales/tr/translations.json')\r\n        },\r\n        en: {\r\n            translations: require('./locales/en/translations.json')\r\n        }\r\n    },\r\n    ns: ['translations'],\r\n    defaultNS: 'translations'\r\n});\r\n\r\ni18n.languages = ['tr', 'en'];\r\n\r\nexport default i18n;","import {Country, CountryAction, CountryState} from \"../../types/country\";\r\nimport {Worldwide} from \"../../types/worldwide\";\r\n\r\nconst defaultState: CountryState = {\r\n\r\n    data: [] as Country[],\r\n    activeCountry: {} as Country,\r\n    selectedCountry: \"all\",\r\n    worldwide: {} as Worldwide\r\n};\r\n\r\nconst countryReducer = (state: CountryState = defaultState, action: CountryAction) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case \"SELECT_COUNTRY\":\r\n            return {...state, selectedCountry: action.payload};\r\n        case \"CHANGE_ACTIVE_COUNTRY\":\r\n            return {...state, activeCountry: action.payload};\r\n        case \"SET_WORLDWIDE_INFO\":\r\n            return {...state, worldwide: action.payload};\r\n        default:\r\n            return state;\r\n\r\n    }\r\n};\r\n\r\nexport default countryReducer;","import {CovidState, CovidStateAction} from \"../../types/covidState\";\r\n\r\nconst defaultState: CovidState = {\r\n\r\n    activeState: \"cases\"\r\n};\r\n\r\nconst covidStateReducer = (state = defaultState, action: CovidStateAction) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case \"SELECT_STATE\":\r\n            return {...state, activeState: action.payload};\r\n\r\n        default:\r\n            return state;\r\n\r\n    }\r\n};\r\n\r\nexport default covidStateReducer;","import {combineReducers} from \"redux\";\r\nimport countryReducer from \"./reducers/countryReducer\";\r\nimport {CountryState} from \"../types/country\";\r\nimport {CovidState} from \"../types/covidState\";\r\nimport covidStateReducer from \"./reducers/covidStateReducer\";\r\n\r\nexport interface AppState {\r\n    country: CountryState;\r\n    covidState: CovidState\r\n}\r\n\r\nconst rootReducer = combineReducers<AppState>({\r\n    country: countryReducer,\r\n    covidState: covidStateReducer\r\n});\r\n\r\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './i18n/config';\nimport rootReducer from \"./store\";\nimport thunk from \"redux-thunk\";\nimport {applyMiddleware, createStore} from \"redux\";\nimport {Provider} from \"react-redux\";\nimport 'font-awesome/css/font-awesome.min.css';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n\n    document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}